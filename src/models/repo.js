module.exports = (sequelize, DataTypes) => {
  const Repo = sequelize.define(
    'Repo',
    {
      id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
      },
      node_id: DataTypes.TEXT,
      name: DataTypes.TEXT,
      full_name: DataTypes.TEXT,
      private: DataTypes.BOOLEAN,
      // owner: some user?,
      html_url: DataTypes.TEXT,
      description: DataTypes.TEXT,
      fork: DataTypes.BOOLEAN,
      url: DataTypes.TEXT,
      forks_url: DataTypes.TEXT,
      keys_url: DataTypes.TEXT,
      collaborators_url: DataTypes.TEXT,
      teams_url: DataTypes.TEXT,
      hooks_url: DataTypes.TEXT,
      issue_events_url: DataTypes.TEXT,
      events_url: DataTypes.TEXT,
      assignees_url: DataTypes.TEXT,
      branches_url: DataTypes.TEXT,
      tags_url: DataTypes.TEXT,
      blobs_url: DataTypes.TEXT,
      git_tags_url: DataTypes.TEXT,
      git_refs_url: DataTypes.TEXT,
      trees_url: DataTypes.TEXT,
      statuses_url: DataTypes.TEXT,
      languages_url: DataTypes.TEXT,
      stargazers_url: DataTypes.TEXT,
      contributors_url: DataTypes.TEXT,
      subscribers_url: DataTypes.TEXT,
      subscription_url: DataTypes.TEXT,
      commits_url: DataTypes.TEXT,
      git_commits_url: DataTypes.TEXT,
      comments_url: DataTypes.TEXT,
      issue_comment_url: DataTypes.TEXT,
      contents_url: DataTypes.TEXT,
      compare_url: DataTypes.TEXT,
      merges_url: DataTypes.TEXT,
      archive_url: DataTypes.TEXT,
      downloads_url: DataTypes.TEXT,
      issues_url: DataTypes.TEXT,
      pulls_url: DataTypes.TEXT,
      milestones_url: DataTypes.TEXT,
      notifications_url: DataTypes.TEXT,
      labels_url: DataTypes.TEXT,
      releases_url: DataTypes.TEXT,
      deployments_url: DataTypes.TEXT,
      created_at: DataTypes.DATE,
      updated_at: DataTypes.DATE,
      pushed_at: DataTypes.DATE,
      git_url: DataTypes.TEXT,
      ssh_url: DataTypes.TEXT,
      clone_url: DataTypes.TEXT,
      svn_url: DataTypes.TEXT,
      homepage: DataTypes.TEXT,
      size: DataTypes.INTEGER,
      stargazers_count: DataTypes.INTEGER,
      watchers_count: DataTypes.INTEGER,
      language: DataTypes.TEXT,
      has_issues: DataTypes.BOOLEAN,
      has_projects: DataTypes.BOOLEAN,
      has_downloads: DataTypes.BOOLEAN,
      has_wiki: DataTypes.BOOLEAN,
      has_pages: DataTypes.BOOLEAN,
      forks_count: DataTypes.INTEGER,
      mirror_url: DataTypes.TEXT,
      archived: DataTypes.BOOLEAN,
      disabled: DataTypes.BOOLEAN,
      open_issues_count: DataTypes.INTEGER,
      // license: DataTypes.TEXT, fix this later
      forks: DataTypes.INTEGER,
      open_issues: DataTypes.INTEGER,
      watchers: DataTypes.INTEGER,
      default_branch: DataTypes.TEXT,
      // organization: some org,
      network_count: DataTypes.INTEGER,
      subscribers_count: DataTypes.INTEGER,

      // Extra Properties
      tracked: DataTypes.BOOLEAN,
      processed: {
        type: DataTypes.BOOLEAN,
        defaultValue: false,
      }
    },
    {
      tableName: 'repo',
      createdAt: 'created_at_internal',
      updatedAt: 'updated_at_internal',
      deletedAt: 'deleted_at_internal',
      paranoid: true,
      timestamps: true,
    }
  );
  Repo.associate = function(models) {
    Repo.belongsTo(models.User, {
      foreignKey: 'user_id',
      targetKey: 'id',
      as: 'user'
    });
  }
  return Repo;
};